{"/home/travis/build/npmtest/node-npmtest-koa-generic-session/test.js":"/* istanbul instrument in package npmtest_koa_generic_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/lib.npmtest_koa_generic_session.js":"/* istanbul instrument in package npmtest_koa_generic_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_koa_generic_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_koa_generic_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-koa-generic-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_koa_generic_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_koa_generic_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_koa_generic_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_koa_generic_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_koa_generic_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_koa_generic_session.__dirname + '/lib.npmtest_koa_generic_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/node_modules/koa-generic-session/index.js":"\nmodule.exports = require('./lib/session');\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/node_modules/koa-generic-session/lib/session.js":"/**!\n * koa-generic-session - lib/session.js\n * Copyright(c) 2013 - 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nconst debug = require('debug')('koa-generic-session:session');\nconst MemoryStore = require('./memory_store');\nconst crc32 = require('crc').crc32;\nconst parse = require('parseurl');\nconst Store = require('./store');\nconst copy = require('copy-to');\nconst uid = require('uid-safe');\n\n/**\n * Warning message for `MemoryStore` usage in production.\n */\n\nconst warning = 'Warning: koa-generic-session\\'s MemoryStore is not\\n' +\n  'designed for a production environment, as it will leak\\n' +\n  'memory, and will not scale past a single process.';\n\nconst defaultCookie = {\n  httpOnly: true,\n  path: '/',\n  overwrite: true,\n  signed: true,\n  maxAge: 24 * 60 * 60 * 1000 //one day in ms\n};\n\n/**\n * setup session store with the given `options`\n * @param {Object} options\n *   - [`key`] cookie name, defaulting to `koa.sid`\n *   - [`store`] session store instance, default to MemoryStore\n *   - [`ttl`] store ttl in `ms`, default to oneday\n *   - [`prefix`] session prefix for store, defaulting to `koa:sess:`\n *   - [`cookie`] session cookie settings, defaulting to\n *     {path: '/', httpOnly: true, maxAge: null, rewrite: true, signed: true}\n *   - [`defer`] defer get session,\n *   - [`rolling`]  rolling session, always reset the cookie and sessions, default is false\n *     you should `yield this.session` to get the session if defer is true, default is false\n *   - [`genSid`] you can use your own generator for sid\n *   - [`errorHanlder`] handler for session store get or set error\n *   - [`valid`] valid(ctx, session), valid session value before use it\n *   - [`beforeSave`] beforeSave(ctx, session), hook before save session\n *   - [`sessionIdStore`] object with get, set, reset methods for passing session id throw requests.\n */\n\nmodule.exports = function (options) {\n  options = options || {};\n  let key = options.key || 'koa.sid';\n  let client = options.store || new MemoryStore();\n  let errorHandler = options.errorHandler || defaultErrorHanlder;\n  let reconnectTimeout = options.reconnectTimeout || 10000;\n\n  let store = new Store(client, {\n    ttl: options.ttl,\n    prefix: options.prefix\n  });\n\n  let genSid = options.genSid || uid.sync;\n  let valid = options.valid || noop;\n  let beforeSave = options.beforeSave || noop;\n\n  let cookie = options.cookie || {};\n  copy(defaultCookie).to(cookie);\n\n  let storeStatus = 'available';\n  let waitStore = Promise.resolve();\n\n  // notify user that this store is not\n  // meant for a production environment\n  if ('production' === process.env.NODE_ENV\n   && client instanceof MemoryStore) console.warn(warning);\n\n  let sessionIdStore = options.sessionIdStore || {\n\n    get: function() {\n      return this.cookies.get(key, cookie);\n    },\n\n    set: function(sid, session) {\n      this.cookies.set(key, sid, session.cookie);\n    },\n\n    reset: function() {\n      this.cookies.set(key, null);\n    }\n  };\n\n  store.on('disconnect', function() {\n    if (storeStatus !== 'available') return;\n    storeStatus = 'pending';\n    waitStore = new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (storeStatus === 'pending') storeStatus = 'unavailable';\n        reject(new Error('session store is unavailable'));\n      }, reconnectTimeout);\n      store.once('connect', resolve);\n    });\n\n  });\n\n  store.on('connect', function() {\n    storeStatus = 'available';\n    waitStore = Promise.resolve();\n  });\n\n  // save empty session hash for compare\n  const EMPTY_SESSION_HASH = hash(generateSession());\n\n  return options.defer ? deferSession : session;\n\n  function addCommonAPI() {\n\n    this._sessionSave = null;\n\n    // more flexible\n    this.__defineGetter__('sessionSave', function () {\n      return this._sessionSave;\n    });\n\n    this.__defineSetter__('sessionSave', function (save) {\n      this._sessionSave = save;\n    });\n  }\n\n  /**\n   * generate a new session\n   */\n  function generateSession() {\n    let session = {};\n    //you can alter the cookie options in nexts\n    session.cookie = {};\n    for (let prop in cookie) {\n      session.cookie[prop] = cookie[prop];\n    }\n    compatMaxage(session.cookie);\n    return session;\n  }\n\n  /**\n   * check url match cookie's path\n   */\n  function matchPath(ctx) {\n    let pathname = parse(ctx).pathname;\n    let cookiePath = cookie.path || '/';\n    if (cookiePath === '/') {\n      return true;\n    }\n    if (pathname.indexOf(cookiePath) !== 0) {\n      debug('cookie path not match');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * get session from store\n   *   get sessionId from cookie\n   *   save sessionId into context\n   *   get session from store\n   */\n  function *getSession() {\n    if (!matchPath(this)) return;\n    if (storeStatus === 'pending') {\n      debug('store is disconnect and pending');\n      yield waitStore;\n    } else if (storeStatus === 'unavailable') {\n      debug('store is unavailable');\n      throw new Error('session store is unavailable');\n    }\n\n    if (!this.sessionId) {\n      this.sessionId = sessionIdStore.get.call(this);\n    }\n\n    let session;\n    let isNew = false;\n    if (!this.sessionId) {\n      debug('session id not exist, generate a new one');\n      session = generateSession();\n      this.sessionId = genSid.call(this, 24);\n      isNew = true;\n    } else {\n      try {\n        session = yield store.get(this.sessionId);\n        debug('get session %j with key %s', session, this.sessionId);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          debug('get session error, code = ENOENT');\n        } else {\n          debug('get session error: ', err.message);\n          errorHandler(err, 'get', this);\n        }\n      }\n    }\n\n    // make sure the session is still valid\n    if (!session ||\n      !valid(this, session)) {\n      debug('session is empty or invalid');\n      session = generateSession();\n      this.sessionId = genSid.call(this, 24);\n      sessionIdStore.reset.call(this);\n      isNew = true;\n    }\n\n    // get the originHash\n    let originalHash = !isNew && hash(session);\n\n    return {\n      originalHash: originalHash,\n      session: session,\n      isNew: isNew\n    };\n  }\n\n  /**\n   * after everything done, refresh the session\n   *   if session === null; delete it from store\n   *   if session is modified, update cookie and store\n   */\n  function *refreshSession (session, originalHash, isNew) {\n\n    // reject any session changes, and do not update session expiry\n    if(this._sessionSave === false) {\n      return debug('session save disabled');\n    }\n\n    //delete session\n    if (!session) {\n      if (!isNew) {\n        debug('session set to null, destroy session: %s', this.sessionId);\n        sessionIdStore.reset.call(this);\n        return yield store.destroy(this.sessionId);\n      }\n      return debug('a new session and set to null, ignore destroy');\n    }\n\n    // force saving non-empty session\n    if(this._sessionSave === true) {\n      debug('session save forced');\n      return yield saveNow.call(this, this.sessionId, session);\n    }\n\n    let newHash = hash(session);\n    // if new session and not modified, just ignore\n    if (!options.allowEmpty && isNew && newHash === EMPTY_SESSION_HASH) {\n      return debug('new session and do not modified');\n    }\n\n    // rolling session will always reset cookie and session\n    if (!options.rolling && newHash === originalHash) {\n      return debug('session not modified');\n    }\n\n    debug('session modified');\n\n    yield saveNow.call(this, this.sessionId, session);\n\n  }\n\n  function *saveNow(id, session) {\n    compatMaxage(session.cookie);\n\n    // custom before save hook\n    beforeSave(this, session);\n\n    //update session\n    try {\n      yield store.set(id, session);\n      sessionIdStore.set.call(this, id, session);\n      debug('saved');\n    } catch (err) {\n      debug('set session error: ', err.message);\n      errorHandler(err, 'set', this);\n    }\n  }\n\n  /**\n   * common session middleware\n   * each request will generate a new session\n   *\n   * ```\n   * let session = this.session;\n   * ```\n   */\n  function *session(next) {\n    this.sessionStore = store;\n    if (this.session || this._session) {\n      return yield next;\n    }\n    let result = yield getSession.call(this);\n    if (!result) {\n      return yield next;\n    }\n\n    addCommonAPI.call(this);\n\n    this._session = result.session;\n\n    // more flexible\n    this.__defineGetter__('session', function () {\n      return this._session;\n    });\n\n    this.__defineSetter__('session', function (sess) {\n      this._session = sess;\n    });\n\n    this.regenerateSession = function *regenerateSession() {\n      debug('regenerating session');\n      if (!result.isNew) {\n        // destroy the old session\n        debug('destroying previous session');\n        yield store.destroy(this.sessionId);\n      }\n\n      this.session = generateSession();\n      this.sessionId = genSid.call(this, 24);\n      sessionIdStore.reset.call(this);\n\n      debug('created new session: %s', this.sessionId);\n      result.isNew = true;\n    }\n\n    // make sure `refreshSession` always called\n    var firstError = null;\n    try {\n      yield next;\n    } catch (err) {\n      debug('next logic error: %s', err.message);\n      firstError = err;\n    }\n    // can't use finally because `refreshSession` is async\n    try {\n      yield refreshSession.call(this, this.session, result.originalHash, result.isNew);\n    } catch (err) {\n      debug('refresh session error: %s', err.message);\n      if (firstError) this.app.emit('error', err, this);\n      firstError = firstError || err;\n    }\n    if (firstError) throw firstError;\n  }\n\n  /**\n   * defer session middleware\n   * only generate and get session when request use session\n   *\n   * ```\n   * let session = yield this.session;\n   * ```\n   */\n  function *deferSession(next) {\n    this.sessionStore = store;\n\n    if (this.session) {\n      return yield next;\n    }\n    let isNew = false;\n    let originalHash = null;\n    let touchSession = false;\n    let getter = false;\n\n    // if path not match\n    if (!matchPath(this)) {\n      return yield next;\n    }\n\n    addCommonAPI.call(this);\n\n    this.__defineGetter__('session', function *() {\n      if (touchSession) {\n        return this._session;\n      }\n      touchSession = true;\n      getter = true;\n\n      let result = yield getSession.call(this);\n      // if cookie path not match\n      // this route's controller should never use session\n      if (!result) return;\n\n      originalHash = result.originalHash;\n      isNew = result.isNew;\n      this._session = result.session;\n      return this._session;\n    });\n\n    this.__defineSetter__('session', function (value) {\n      touchSession = true;\n      this._session = value;\n    });\n\n    this.regenerateSession = function *regenerateSession() {\n      debug('regenerating session');\n      // make sure that the session has been loaded\n      yield this.session;\n\n      if (!isNew) {\n        // destroy the old session\n        debug('destroying previous session');\n        yield store.destroy(this.sessionId);\n      }\n\n      this._session = generateSession();\n      this.sessionId = genSid.call(this, 24);\n      sessionIdStore.reset.call(this);\n      debug('created new session: %s', this.sessionId);\n      isNew = true;\n      return this._session;\n    }\n\n    yield next;\n\n    if (touchSession) {\n      // if only this.session=, need try to decode and get the sessionID\n      if (!getter) {\n        this.sessionId = sessionIdStore.get.call(this);\n      }\n\n      yield refreshSession.call(this, this._session, originalHash, isNew);\n    }\n  }\n};\n\n/**\n * get the hash of a session include cookie options.\n */\nfunction hash(sess) {\n  return crc32.signed(JSON.stringify(sess));\n}\n\n/**\n * cookie use maxAge, hack to compat connect type `maxage`\n */\nfunction compatMaxage(opts) {\n  if (opts) {\n    opts.maxAge = opts.maxage ? opts.maxage : opts.maxAge;\n    delete opts.maxage;\n  }\n}\n\nmodule.exports.MemoryStore = MemoryStore;\n\nfunction defaultErrorHanlder (err, type, ctx) {\n  err.name = 'koa-generic-session ' + type + ' error';\n  throw err;\n}\n\nfunction noop () {\n  return true;\n}\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/node_modules/koa-generic-session/lib/memory_store.js":"/**!\n * koa-generic-session - lib/memory_store.js\n * Copyright(c) 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('koa-generic-session:memory_store');\n\nvar MemoryStore = module.exports = function () {\n  this.sessions = {};\n};\n\nMemoryStore.prototype.get = function *(sid) {\n  debug('get value %j with key %s', this.sessions[sid], sid);\n  return this.sessions[sid];\n};\n\nMemoryStore.prototype.set = function *(sid, val) {\n  debug('set value %j for key %s', val, sid);\n  this.sessions[sid] = val;\n};\n\nMemoryStore.prototype.destroy = function *(sid) {\n  delete this.sessions[sid];\n};\n","/home/travis/build/npmtest/node-npmtest-koa-generic-session/node_modules/koa-generic-session/lib/store.js":"/**!\n * koa-generic-session - lib/store.js\n * Copyright(c) 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('koa-generic-session:store');\nvar copy = require('copy-to');\n\nvar defaultOptions = {\n  prefix: 'koa:sess:'\n};\n\nfunction Store(client, options) {\n  this.client = client;\n  this.options = {};\n  copy(options).and(defaultOptions).to(this.options);\n  EventEmitter.call(this);\n\n  // delegate client connect / disconnect event\n  if (typeof client.on === 'function') {\n    client.on('disconnect', this.emit.bind(this, 'disconnect'));\n    client.on('connect', this.emit.bind(this, 'connect'));\n  }\n}\n\nutil.inherits(Store, EventEmitter);\n\nStore.prototype.get = function *(sid) {\n  var data;\n  sid = this.options.prefix + sid;\n  debug('GET %s', sid);\n  data = yield this.client.get(sid);\n  if (!data) {\n    debug('GET empty');\n    return null;\n  }\n  if (data && data.cookie && typeof data.cookie.expires === 'string') {\n    // make sure data.cookie.expires is a Date\n    data.cookie.expires = new Date(data.cookie.expires);\n  }\n  debug('GOT %j', data);\n  return data;\n};\n\nStore.prototype.set = function *(sid, sess) {\n  var ttl = this.options.ttl;\n  if (!ttl) {\n    var maxAge = sess.cookie && sess.cookie.maxAge;\n    if (typeof maxAge === 'number') {\n      ttl = maxAge;\n    }\n    // if has cookie.expires, ignore cookie.maxAge\n    if (sess.cookie && sess.cookie.expires) {\n      ttl = Math.ceil(sess.cookie.expires.getTime() - Date.now());\n    }\n  }\n\n  sid = this.options.prefix + sid;\n  debug('SET key: %s, value: %s, ttl: %d', sid, sess, ttl);\n  yield this.client.set(sid, sess, ttl);\n  debug('SET complete');\n};\n\nStore.prototype.destroy = function *(sid) {\n  sid = this.options.prefix + sid;\n  debug('DEL %s', sid);\n  yield this.client.destroy(sid);\n  debug('DEL %s complete', sid);\n};\n\nmodule.exports = Store;\n"}